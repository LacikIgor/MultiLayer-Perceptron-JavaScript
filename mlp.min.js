function initArraySequence(t){for(var i=[],e=0;t>e;e++)i.push(e);return i}function initArrayZeros(t){for(var i=[],e=0;t>e;e++)i.push(0);return i}function initArrayNulls(t){for(var i=[],e=0;t>e;e++)i.push(null);return i}function initArrayRandVals(t){for(var i=[],e=0;t>e;e++)i.push(2*Math.random()-1);return i}function getArrayToString(t,i){var e=i+", ";for(var r in t)t.hasOwnProperty(r)&&(e+=t[r]+", ");return e+="<br />"}function shuffleArray(t){for(var i,e,r=t.length;r;i=Math.floor(Math.random()*r),e=t[--r],t[r]=t[i],t[i]=e);return t}function checkUndefined(t){void 0===t&&console.log("Can be undefined")}function checkNaN(t){isNaN(t)&&console.log("Can be NaN")}function precise_round(t,i){return Math.round(t*Math.pow(10,i))/Math.pow(10,i)}function getInputValue(t,i){return i--,t[i]}function getTarget(t,i){return i--,t[i]}function getDesiredOuput(t,i){var e=training_data[t];return e=e.slice(Math.max(e.length-i,1))}function MLPGenerator(t,i,e,r,s,o){this.NeuronCount=1+t+i+e,this.uFirstWeight=initArrayZeros(this.NeuronCount),this.uLastWeight=initArrayZeros(this.NeuronCount),this.uAFType=initArrayNulls(this.NeuronCount),this.uType=initArrayNulls(this.NeuronCount);for(var n=0;t>=n;n++)this.uFirstWeight[n]=VOID,this.uLastWeight[n]=VOID,this.uAFType[n]=AF_VOID,this.uType[n]=INPUT;this.uType[0]=THRESHOLD;for(var h=1+t,u=1+(0===i?t:i),a=t+1,n=a;t+i>=n;n++){var g=n-a;this.uFirstWeight[n]=g*h,this.uLastWeight[n]=(g+1)*h-1,this.uAFType[n]=r,this.uType[n]=HIDDEN}for(var T=t+i+1,n=T;n<this.NeuronCount;n++){var p=n-T;this.uFirstWeight[n]=i*h+p*u,this.uLastWeight[n]=i*h+(p+1)*u-1,this.uAFType[n]=s,this.uType[n]=OUTPUT}this.WeightCount=i*h+e*u,this.wDest=initArrayZeros(this.WeightCount),this.wSource=initArrayZeros(this.WeightCount),this.wDelay=initArrayZeros(this.WeightCount),this.wValue=void 0===o?initArrayRandVals(this.WeightCount):o,this.WeightCount=0;for(var n=t+1;t+i>=n;n++)for(var y=0;t>=y;y++)this.wDest[this.WeightCount]=n,this.wSource[this.WeightCount]=y,this.WeightCount++;for(var n=t+i+1;t+i+e>=n;n++){if(this.wDest[this.WeightCount]=n,this.wSource[this.WeightCount]=0,this.WeightCount++,0===i)for(var y=1;t>=y;y++)this.wDest[this.WeightCount]=n,this.wSource[this.WeightCount]=y,this.WeightCount++;if(0!==i)for(var y=t+1;t+i>=y;y++)this.wDest[this.WeightCount]=n,this.wSource[this.WeightCount]=y,this.WeightCount++}}function activationFunction(t,i){var e=0;return i===LIN?e=t:i===SGM?e=1/(1+Math.exp(-t)):i===TANH?e=(Math.exp(t)-Math.exp(-t))/(Math.exp(t)+Math.exp(-t)):alert("INVALID ACTIVATION FUNCTION TYPE "+i),e}function derivateActivationFunction(t,i){var e=0;return i===LIN?e=1:i===SGM?e=t*(1-t):i===TANH?e=1-t*t:(alert("INVALID ACTIVATION FUNCTION TYPE "+i),e=1),e}function MLP(t,i,e,r,s,o,n,h,u){var a=new MLPGenerator(t,i,e,r,s,o);this.inDimSize=t,this.hidDimSize=i,this.NeuronCount=a.getNeuronCount(),this.uFirstWeight=a.getFirstWeights(),this.uLastWeight=a.getLastWeights(),this.uType=a.getTypes(),this.uAFType=a.getAFTypes(),this.WeightCount=a.getWeightCount(),this.wSource=a.getSources(),this.wDest=a.getDests(),this.wDelay=a.getDelays(),this.wValue=a.getValues(),this.alpha=n,this.beta=h,this.softmax=u,this.ACT=void 0,this.ACTD=void 0,this.string_val=a.modelToString(),this.step=1}function getOutputFromNetwork(t){var i=[];for(var e in t)t.hasOwnProperty(e)&&""!==t[e]&&i.push(t[e]);return i}var BIAS_THRESHOLD_VAL=-1,inputs=[[-1,1,1],[-1,0,1],[-1,1,0],[-1,0,0]],targets=[[0],[1],[1],[0]],VOID=-1,SGM="SGM",LIN="LIN",TANH="TANH",THRESHOLD="T",INPUT="I",HIDDEN="H",OUTPUT="O",AF_VOID="VOID";MLPGenerator.prototype.modelToString=function(){var t="";return t+="UNI",t+="<br />",t+=getArrayToString(initArraySequence(this.NeuronCount),"uIndex"),t+=getArrayToString(this.uFirstWeight,"uFirstWeight"),t+=getArrayToString(this.uLastWeight,"uLastWeight"),t+=getArrayToString(this.uType,"uType"),t+=getArrayToString(this.uAFType,"uAFType"),t+="<br />",t+="CON",t+="<br />",t+=getArrayToString(initArraySequence(this.WeightCount),"wIndex"),t+=getArrayToString(this.wSource,"wSource"),t+=getArrayToString(this.wDest,"wDest"),t+=getArrayToString(this.wDelay,"wDelay"),t+=getArrayToString(this.wValue,"wValue")},MLPGenerator.prototype.getNeuronCount=function(){return this.NeuronCount},MLPGenerator.prototype.getWeightCount=function(){return this.WeightCount},MLPGenerator.prototype.getFirstWeights=function(){return this.uFirstWeight},MLPGenerator.prototype.getLastWeights=function(){return this.uLastWeight},MLPGenerator.prototype.getTypes=function(){return this.uType},MLPGenerator.prototype.getAFTypes=function(){return this.uAFType},MLPGenerator.prototype.getSources=function(){return this.wSource},MLPGenerator.prototype.getDests=function(){return this.wDest},MLPGenerator.prototype.getDelays=function(){return this.wDelay},MLPGenerator.prototype.getValues=function(){return this.wValue},MLP.prototype.forwardPass=function(t){var i=[];this.ACT=void 0,this.ACTD=void 0,this.ACT=initArrayZeros(this.NeuronCount),this.ACTD=initArrayZeros(this.NeuronCount);for(var e=0;e<this.NeuronCount;e++){if(this.uType[e]===THRESHOLD)this.ACT[e]=1;else if(this.uType[e]===INPUT)this.ACT[e]=getInputValue(t,e);else{for(var r=0,s=this.uFirstWeight[e];s<=this.uLastWeight[e];s++)r+=this.wValue[s]*this.ACT[this.wSource[s]];this.ACT[e]=activationFunction(r,this.uAFType[e]),this.ACTD[e]=derivateActivationFunction(this.ACT[e],this.uAFType[e])}this.uType[e]===OUTPUT&&(i[e]=this.ACT[e])}return i},MLP.prototype.forwardPassSoftmax=function(t){var i=0,e=[];this.ACT=void 0,this.ACTD=void 0,this.ACT=initArrayZeros(this.NeuronCount),this.ACTD=initArrayZeros(this.NeuronCount);for(var r=0;r<this.NeuronCount;r++)if(this.uType[r]===THRESHOLD)this.ACT[r]=1;else if(this.uType[r]===INPUT)this.ACT[r]=getInputValue(t,r);else{for(var s=0,o=this.uFirstWeight[r];o<=this.uLastWeight[r];o++)s+=this.wValue[o]*this.ACT[this.wSource[o]];if(this.uType[r]===OUTPUT){var n=Math.exp(s);this.ACT[r]=n,i+=n}else this.ACT[r]=activationFunction(s,this.uAFType[r]);this.ACTD[r]=derivateActivationFunction(this.ACT[r],this.uAFType[r])}0==i&&(console.log("Zero output for "+t),i=-1);for(var r=0;r<this.NeuronCount;r++)this.uType[r]===OUTPUT&&(this.ACT[r]=this.ACT[r]/i,e[r]=this.ACT[r]);return e},MLP.prototype.train=function(t,i){var e=this,r="";r+=this.softmax?e.forwardPassSoftmax(t):e.forwardPass(t);for(var s=initArrayZeros(this.WeightCount),o=initArrayZeros(this.WeightCount),n=this.NeuronCount-1;n>=0;n--)s[n]=0;for(var n=this.NeuronCount-1;n>=0&&this.uType[n]!==INPUT;n--){this.uType[n]===OUTPUT&&(s[n]+=e.getTarget(n,i)-this.ACT[n],r+="Target => "+e.getTarget(n,i)+"<br />"),s[n]*=this.ACTD[n];for(var h=this.uLastWeight[n];h>=this.uFirstWeight[n];h--)-1!==h&&(this.uType[this.wSource[h]]!==INPUT&&this.uType[this.wSource[h]]!==THRESHOLD&&(s[this.wSource[h]]+=this.wValue[h]*s[n]),o[h]+=this.alpha*s[n]*this.ACT[this.wSource[h]])}for(var h=0;h<this.WeightCount;h++)this.wValue[h]+=o[h],o[h]*=this.beta;return r+=getArrayToString(this.wValue,"Altered Weights"),r+="End one step train <br />"},MLP.prototype.batchTrain=function(t,i,e){for(var r=this,s=0;e>s;s++)r.train(t,i)},MLP.prototype.propagate=function(t){var i=this,e=void 0;return e=this.softmax?i.forwardPassSoftmax(t):i.forwardPass(t),getOutputFromNetwork(e)},MLP.prototype.toString=function(){return this.string_val},MLP.prototype.getTarget=function(t,i){return i[t-(this.inDimSize+this.hidDimSize+1)]};